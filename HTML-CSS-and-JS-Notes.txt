<!-- What are the differences between HTML, CSS, and JavaScript? -->
HTML        Structure and Content
CSS         Style
JavaScript  Interactivity and Functionality


<!-- Tell me more about JavaScript -->
JavaScript can also dynamically update a page in real-time. JavaScript can also do things like display moving animations on a webpage, or have specific events like "onclick" or "onhover" for specific events. JavaScript is loaded within <script> tags, or included remotely via <script src="/location/of/javascript_file.js"></script>


<!-- See an example of JavaScript in action -->
<!-- Changing text from one thing to another -->
<body>
    <div id="demo">Hi there!</div>
    <script type="text/javascript">
        document.getElementById("demo").innerHTML = "Hack the Planet";
    </script>
</body>
<!-- Changing text after clicking a button -->
<body>
    <div id="demo">Hi there!</div>
    <button onclick='document.getElementById("demo").innerHTML = "Button Clicked";'>Click Me!</button>
</body>


<!-- What does <!DOCTYPE html> do? -->
DOCTYPE html defines that the page is a HTML5 document.


<!-- What is whitespace collapsing? -->
whitespace collapsing is means that it doesn't repsect spaces or newlines between characters.
<!-- Example of whitepsace collapsing -->
...
<body>
    <p>my       sentence
    </p>
</body>
...
<!-- Result -->
my sentence


<!-- What does Title do? -->
Title is the text that shows up in a tab
<!-- Example of how title works -->
/images/title-tag.png


<!-- What does Head do? -->
Head is NOT displayed in the browser Head is where you put metadata
<!-- Exmaples of metadata you can put in head -->
<head ... >
* title
* meta
* link
* script
* style
<!-- More about Head -->
https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML


<!-- How to make link open on new tab -->
<body>
    <a href="#" target="_blank">
</body>


<!-- How to implement return to top of page button -->
<body>
    <h1 id="top">Whatever Text</h1>
    ...
    <a href="#top">Back to top</a>
</body>


<!-- How to change size of image -->
<img src="/images/KIMG0781.JPG" height="260">


<!-- How to setup Prettier properly -->
1. Install the extension Prettier.
2. Reload
3. Settings (ctrl+,)
4. Search for "format"
5. Choose Format on paste & format on save
6. Default Formatter -> Prettier
7 Close


<!-- What is HTML input injection? -->
If you have a field that accepts input, and you can use something like h1 to display text on the website without any form of checking or sanitization, it means that HTML can be injected directly into the website. Never to trust user input. Sanitize everything
<!-- Example of input injection issue -->
<script>
    function sayHi() {
        const name = document.getElementById('name').value
        document.getElementById("welcome-msg").innerHTML = "Welcome " + name
    }
</script>


<!-- What is an HTTP method, and which are most commonly used for webservers? -->
An HTTP method is a means to communcate data to and from a server. The two most common methods for a webserver are:
GET         Retrieve Content
POST        Send data (comment, performing login, etc.)

The other methods are:
HEAD        (Similar to GET) Asks for a response without the response body
PUT         Replaces current data with payload
DELETE      Deletes the specified resource
CONNECT     Establishes a tunnel to the server
OPTIONS     Used to describe the communication options
TRACE       Message loop-back test
PATCH       Apply partial modifications

<!-- What ports do HTTP(s) use? -->
HTTP        80
HTTPS       443


<!-- What are the different server response codes, and what do they mean? -->
100-199     Information
200-299     Successes (200 OK is the "normal" response for a GET)
300-399     Redirects (the information you want is elsewhere)
400-499     Client errors (You did something wrong, like asking for something that doesn't exist)
500-599     Server errors (The server tried, but something went wrong on their side)


<!-- What are cookies commonly used for? -->
Cookies are commonly used for session management and advertising. Cookies are normally sent with every HTTP request made to a server. Cookies that are store to each browser, so a cookie in a Firefox browser will not be present in a Chrome browser. HTTP requests are "stateless" (do not track information) so cookies are used to track that information. Cookies are typically only sent with requests to sites that set them; advertising and tracking cookies sometimes work differently. Cookies are normally set by the server through the response header "Set-Cookie". Cookies can also be set by JavaScript within the browser.


<!-- The parts of a cookie are -->
Name          Identifies the cookie
Value         Where the data is stored
Expiry date   When the browser will get rid of the cookie
Path          Determines what requests the cookie will be sent with


<!-- Examples of cookies in action -->
* Tracking which items are in a shopping cart
* Who you are
* What you have interacted with on the website


<!-- Cookies and session tokens -->
Session tokens are what lets a web server identify requests you make. If you steal someone elses session token, you are often allowed to impersonate them.


<!-- To create a cookie (in Chrome) for a website -->
Dev Tools (F12) -> Application tab -> Storage -> Cookies -> Website -> double click in empty area


<!--  -->



<!--  -->
<!--  -->
<!--  -->
<!--  -->
<!--  -->
<!--  -->
<!--  -->


Additional resources:
https://tryhackme.com/room/webfundamentals
https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies
